#! /usr/bin/env python3
"""main script for the iterm profiles."""

import json
import argparse
import os
from difflib import Differ
import copy
import pprint
import yaml
import iterm2

from pterm import create_aws_profiles  # pylint: disable=import-self
from pterm import create_profile  # pylint: disable=import-self
from pterm import sort_aws_config  # pylint: disable=import-self
from pterm import create_k8s_profile  # pylint: disable=import-self
from pterm import create_vault_profile  # pylint: disable=import-self
from pterm import version  # pylint: disable=import-self


def main():
    """docstring for main"""
    parser = argparse.ArgumentParser(
        description='Generates iterm2 dynamic profiles'
    )

    parser.add_argument('--aws-config',
                        default=os.path.expanduser('~/.aws/config'),
                        help='aws config folder')

    parser.add_argument('--dest',
                        default=os.path.expanduser(
                            "~/Library/Application Support/iTerm2/DynamicProfiles/aws-profiles.json"
                        ),
                        help='Destination file for the profiles')

    parser.add_argument('--set-default',
                        action='store_true',
                        help='Help message')

    parser.add_argument('--kube-config',
                        default=os.path.expanduser("~/.kube/config"),
                        help='kubectl configuration file')

    parser.add_argument('-K', '--disable-kubernetes',
                        action='store_true',
                        default=False,
                        help='Disable kubernetes support')

    parser.add_argument('-s', '--sort',
                        action='store_true',
                        help='Sort the aws config')

    parser.add_argument('-d', '--diff',
                        action='store_true',
                        help='Print a diff to the current profiles')
    parser.add_argument('-n', '--dry-run',
                        dest='dry',
                        action='store_true',
                        help='Dry run mode')
    parser.add_argument('-v', '--verbose',
                        action='count',
                        default=0,
                        help='Increase verbosity')
    parser.add_argument('--version',
                        action='version',
                        version='%(prog)s ' + version.__version__
                        )

    args = parser.parse_args()

    if args.diff:
        args.dry = True

    if args.sort:
        sort_aws_config(args.aws_config, args.dry)

    profiles = {}
    aws_profiles = create_aws_profiles(args.aws_config)
    profiles['Profiles'] = aws_profiles
    if not args.disable_kubernetes:
        profiles['Profiles'] += create_k8s_profiles(
            args.kube_config, aws_profiles, args.dry
        )
    profiles['Profiles'] += [
        create_profile("pterm-default", change_title=True, badge=False),
        create_vault_profile('vault-server-dev'),
    ]

    if args.diff:
        current = [x.rstrip() for x in list(tuple(open(args.dest, 'r')))]
        new = json.dumps(profiles, indent=4).split('\n')
        diff = Differ()
        result = list(diff.compare(current, new))
        result = [x for x in result if x[0] != ' ']
        if result:
            pretty_res = pprint.PrettyPrinter(width=200)
            pretty_res.pprint(result)
    elif args.dry:
        print(json.dumps(profiles, indent=4))
    else:
        with open(args.dest, "w") as out:
            out.write(json.dumps(profiles, indent=4))
    if args.set_default:
        iterm2.run_until_complete(set_default)


async def set_default(connection):
    """Set the default profile in iterm."""
    all_profiles = await iterm2.PartialProfile.async_query(connection)
    for profile in all_profiles:
        if profile.name == "pterm-default":
            await profile.async_make_default()
            return


def create_k8s_profiles(kube_config, aws_profiles, dry):
    """Create the k8s profiles"""

    if not os.path.exists(kube_config):
        return []

    with open(os.path.expanduser(kube_config)) as file:
        config = yaml.full_load(file)

    clusters = [x['name'] for x in config['clusters']]

    profiles = []
    for cluster in clusters:
        this = carve_k8s_cluster(config, cluster)
        cfg = os.path.join(
            os.path.dirname(kube_config),
            f"config.{cluster.replace('/', '__')}.yml"
        )
        if not dry:
            with open(cfg, "w") as out:
                yaml.dump(this, out)
        new = create_k8s_profile(this, cfg, aws_profiles)
        profiles += [new]
    return profiles


def carve_k8s_cluster(config, cluster):
    """docstring for carve_k8s_cluster"""

    config_cluster = [x for x in config['clusters'] if x['name'] == cluster]
    config_context = [x for x in config['contexts'] if x['name'] == cluster]
    config_user = [x for x in config['users'] if x['name'] == cluster]

    new = copy.deepcopy(config)
    new['clusters'] = config_cluster
    new['contexts'] = config_context
    new['users'] = config_user
    new['current-context'] = cluster

    return new


if __name__ == '__main__':
    main()
